# Copyright (c) 2020 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: build-rudp-binaries-ios
on: [push]

jobs:
  job:
    name: ${{ matrix.triplet }}-build-rudp-binaries-autocache
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        include:
          - os: macos-latest
            triplet: arm64-ios

    env:
      buildDir: '${{ github.workspace }}/build/'

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      
      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ matrix.triplet }}-${{ matrix.EVENT_MATRIX }}-v1

      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      # Restore from cache the previously built ports. If a "cache miss" occurs, then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on to install the packages when run-cmake runs, no packages are installed at this time and the input 'setupOnly:true' is mandatory.
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: true
          # Location of the vcpkg submodule in the Git repository.
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg_manifest/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed

      # Restore from cache the previously built ports. If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
      - name: Restore from cache and install vcpkg
        # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
        uses: lukka/run-vcpkg@main
        with:
          setupOnly: true

      # Now that vcpkg is installed, it is being used to run with the desired arguments.
      - name: install GameNetworkingSockets
        run: |
          cd $VCPKG_ROOT

          echo "
          set(VCPKG_OSX_DEPLOYMENT_TARGET 11.0)
          set(ENABLE_BITCODE true)
          set(VCPKG_TARGET_ARCHITECTURE arm64)
          set(VCPKG_CRT_LINKAGE static)
          set(VCPKG_LIBRARY_LINKAGE static)
          set(VCPKG_CMAKE_SYSTEM_NAME iOS)
          " > triplets/community/arm64-ios.cmake

          git apply --reverse --reject --whitespace=fix ${{ github.workspace }}/fix_ios_protobuf.patch || true

          cd ${{ github.workspace }}/GameNetworkingSockets

          brew install protobuf

          git apply --reject --whitespace=fix ${{ github.workspace }}/mobile_120.patch

          cd $VCPKG_ROOT
          
          git apply --reject --whitespace=fix ${{ github.workspace }}/fix_ios_protobuf.patch

          $VCPKG_ROOT/vcpkg remove gamenetworkingsockets --triplet=${{ matrix.triplet }}

          $VCPKG_ROOT/vcpkg --overlay-ports=${{ github.workspace }}/GameNetworkingSockets/vcpkg_ports install gamenetworkingsockets --triplet=${{ matrix.triplet }}
        shell: bash
        
      - name: upload GameNetworkingSockets 
        uses: actions/upload-artifact@v2
        if: "!failure()"
        with:
          name: ${{ matrix.triplet }}-${{ matrix.EVENT_MATRIX }}-build
          path: ${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/lib

      # upload artifact on failure
      - name: upload failure logs (if failure)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ matrix.triplet }}-${{ matrix.EVENT_MATRIX }}-build-failure-logs
          path: |
            ${{ github.workspace }}/vcpkg/buildtrees/protobuf
            ${{ github.workspace }}/vcpkg/buildtrees/detect_compiler/*.*
            ${{ github.workspace }}/vcpkg/buildtrees/gamenetworkingsockets/*.log
            ${{ github.workspace }}/vcpkg/buildtrees/openssl/*.log
            ${{ github.workspace }}/vcpkg/buildtrees/libsodium/*.log